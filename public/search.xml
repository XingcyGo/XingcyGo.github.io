<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Design-Patterns</title>
    <url>//6569080d.html</url>
    <content><![CDATA[<h2 id="1-七大设计原则"><a href="#1-七大设计原则" class="headerlink" title="1 七大设计原则"></a>1 七大设计原则</h2><h3 id="1-1单一职责原则"><a href="#1-1单一职责原则" class="headerlink" title="1.1单一职责原则"></a>1.1单一职责原则</h3><p>每个类只负责一个职责</p>
 <a id="more"></a>

<h3 id="1-2接口隔离原则"><a href="#1-2接口隔离原则" class="headerlink" title="1.2接口隔离原则"></a>1.2接口隔离原则</h3><p>一个类对另一个类(接口的实现)的依赖应该建立在最小的接口上</p>
<h3 id="1-3依赖倒转-倒置-原则"><a href="#1-3依赖倒转-倒置-原则" class="headerlink" title="1.3依赖倒转(倒置)原则"></a>1.3依赖倒转(倒置)原则</h3><p>上层不能依赖于下层,他们都应该依赖于抽象(面向接口编程)</p>
<h3 id="1-4里式替换原则"><a href="#1-4里式替换原则" class="headerlink" title="1.4里式替换原则"></a>1.4里式替换原则</h3><p>所有引用基类的地方都能透明的引用其子类的对象(子类不破坏父类的方法). 必须要破坏的话,可以把原来的继承关系变成共同继承同一个父类,使用依赖聚合组合等关系替代</p>
<h3 id="1-5开闭原则"><a href="#1-5开闭原则" class="headerlink" title="1.5开闭原则"></a>1.5开闭原则</h3><p>对扩展(提供方)开放,对修改(使用方)关闭  (例: 继承抽象类实现抽象方法,扩展方扩展时重写方法,使用方只需调用抽象方法) 扩展功能时使用方代码无需变动</p>
<h3 id="1-6迪米特法则"><a href="#1-6迪米特法则" class="headerlink" title="1.6迪米特法则"></a>1.6迪米特法则</h3><p>最少知道法则,避免出现非直接朋友(不是成员变量,方法返回值/参数)的耦合,即只直接和朋友通信</p>
<h3 id="1-7合成复用原则"><a href="#1-7合成复用原则" class="headerlink" title="1.7合成复用原则"></a>1.7合成复用原则</h3><p>尽量使用合成/聚合的方式,而不是使用继承</p>
<h2 id="2-UML类图"><a href="#2-UML类图" class="headerlink" title="2 UML类图"></a>2 UML类图</h2><h3 id="2-1类型和作用"><a href="#2-1类型和作用" class="headerlink" title="2.1类型和作用"></a>2.1类型和作用</h3><p>UML: Unified modeling language UML (统一建模语言)</p>
<ol>
<li>用于描述系统中的类(对象)本身的组成和类(对象)之间的各种静态关系。</li>
<li>类之间的关系：依赖、泛化（继承）、实现、关联、聚合与组合。</li>
</ol>
<h3 id="2-2-关系"><a href="#2-2-关系" class="headerlink" title="2.2 关系"></a>2.2 关系</h3><ul>
<li><strong>依赖关系</strong> 类中使用到了对方(作为成员属性,返回类型,参数类型,方法中的局部变量),就是依赖对方 虚线加箭头</li>
<li><strong>泛化关系</strong> 继承关系,是依赖关系的特例   实线加三角</li>
<li><strong>实现关系</strong> 实现关系也是依赖关系的特例  虚线加三角</li>
<li><strong>关联关系</strong> 类与类之间的关系,是依赖关系的特例 实线加箭头</li>
<li><strong>聚合关系</strong> 整体和部分可以分开,是关联关系的特例 虚线菱形加实线加三角</li>
<li><strong>组合关系</strong> 整体和部分不可以分开,是关联关系的特例 实心菱形加实线加三角</li>
</ul>
<h2 id="3-设计模式类型"><a href="#3-设计模式类型" class="headerlink" title="3 设计模式类型"></a>3 设计模式类型</h2><p>设计模式的本质是提高软件的维护性，通用性和扩展性，并降低软件的复杂度。</p>
<h3 id="3-1-创建型模式"><a href="#3-1-创建型模式" class="headerlink" title="3.1 创建型模式"></a>3.1 创建型模式</h3><h4 id="1-单例模式"><a href="#1-单例模式" class="headerlink" title="(1) 单例模式"></a><strong>(1) 单例模式</strong></h4><p>抽象工厂模式类的单例设计模式，就是采取一定的方法保证在整个的软件系统中，对某个类只能存在一个对象实例，并且该类只提供一个取得其对象实例的方法(静态方法)。</p>
<h5 id="饿汉式-静态常量"><a href="#饿汉式-静态常量" class="headerlink" title="饿汉式(静态常量)"></a>饿汉式(静态常量)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"><span class="comment">// 本类内部创建对象实例</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">final</span> <span class="keyword">static</span> Singleton SINGLETON = <span class="keyword">new</span> Singleton();</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getSingleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> SINGLETON;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="饿汉式-静态代码块"><a href="#饿汉式-静态代码块" class="headerlink" title="饿汉式(静态代码块)"></a>饿汉式(静态代码块)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">new</span> <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;&#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span>  <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">static</span> &#123; <span class="comment">// 在静态代码块中，创建单例对象</span></span><br><span class="line">    instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123; </span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="懒汉式-线程不安全"><a href="#懒汉式-线程不安全" class="headerlink" title="懒汉式(线程不安全)"></a>懒汉式(线程不安全)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，当使用到该方法时，才去创建 instance</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="懒汉式-线程安全-同步方法"><a href="#懒汉式-线程安全-同步方法" class="headerlink" title="懒汉式(线程安全,同步方法)"></a>懒汉式(线程安全,同步方法)</h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//提供一个静态的公有方法，当使用到该方法时，才去创建 instance</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="懒汉式-线程安全-同步代码块"><a href="#懒汉式-线程安全-同步代码块" class="headerlink" title="懒汉式(线程安全,同步代码块)"></a><del>懒汉式(线程安全,同步代码块)</del></h5><h5 id="双重检查-推荐使用"><a href="#双重检查-推荐使用" class="headerlink" title="双重检查(推荐使用)"></a><strong>双重检查(推荐使用)</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 防止指令重排拿到空</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">volatile</span> Singleton instance;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// 双重检查</span></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">      <span class="keyword">synchronized</span> (Singleton.class) &#123;</span><br><span class="line">        <span class="keyword">if</span> (instance == <span class="keyword">null</span>) &#123;</span><br><span class="line">          instance = <span class="keyword">new</span> Singleton();</span><br><span class="line">        &#125;</span><br><span class="line">      &#125;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> instance;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="静态内部类-推荐使用"><a href="#静态内部类-推荐使用" class="headerlink" title="静态内部类(推荐使用)"></a><strong>静态内部类(推荐使用)</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Singleton</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">private</span> <span class="title">Singleton</span><span class="params">()</span> </span>&#123;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//静态内部类在使用时加载,并且是线程安全的</span></span><br><span class="line">  <span class="keyword">private</span> <span class="keyword">static</span> <span class="class"><span class="keyword">class</span> <span class="title">SingletonInstance</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Singleton INSTANCE = <span class="keyword">new</span> Singleton();</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">synchronized</span> Singleton <span class="title">getInstance</span><span class="params">()</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> SingletonInstance.INSTANCE;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="枚举-最推荐使用"><a href="#枚举-最推荐使用" class="headerlink" title="枚举(最推荐使用)"></a><strong>枚举(最推荐使用)</strong></h5><figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">enum</span> Singleton &#123;</span><br><span class="line">  INSTANCE;</span><br><span class="line"></span><br><span class="line">  <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">sayOK</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;OK~&quot;</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h4 id="2-工厂模式"><a href="#2-工厂模式" class="headerlink" title="(2) 工厂模式"></a><strong>(2) 工厂模式</strong></h4><h5 id="简单工厂模式："><a href="#简单工厂模式：" class="headerlink" title="简单工厂模式："></a>简单工厂模式：</h5><h5 id="工厂方法模式"><a href="#工厂方法模式" class="headerlink" title="工厂方法模式"></a>工厂方法模式</h5><h4 id="3-抽象工厂模式"><a href="#3-抽象工厂模式" class="headerlink" title="(3)抽象工厂模式"></a>(3)抽象工厂模式</h4><h4 id="4-原型模式"><a href="#4-原型模式" class="headerlink" title="(4)原型模式"></a>(4)原型模式</h4><h4 id="5-建造者模式"><a href="#5-建造者模式" class="headerlink" title="(5)建造者模式"></a>(5)建造者模式</h4><h3 id="3-2-结构型模式"><a href="#3-2-结构型模式" class="headerlink" title="3.2 结构型模式"></a>3.2 结构型模式</h3><h4 id="6-适配器模式"><a href="#6-适配器模式" class="headerlink" title="(6)适配器模式"></a>(6)适配器模式</h4><h4 id="7-桥接模式"><a href="#7-桥接模式" class="headerlink" title="(7)桥接模式"></a>(7)桥接模式</h4><h4 id="8-装饰模式"><a href="#8-装饰模式" class="headerlink" title="(8)装饰模式"></a><strong>(8)装饰模式</strong></h4><h4 id="9-组合模式"><a href="#9-组合模式" class="headerlink" title="(9)组合模式"></a>(9)组合模式</h4><h4 id="10-外观模式"><a href="#10-外观模式" class="headerlink" title="(10)外观模式"></a>(10)外观模式</h4><h4 id="11-享元模式"><a href="#11-享元模式" class="headerlink" title="(11)享元模式"></a>(11)享元模式</h4><h4 id="12-代理模式"><a href="#12-代理模式" class="headerlink" title="(12)代理模式"></a><strong>(12)代理模式</strong></h4><h3 id="3-3-行为型模式"><a href="#3-3-行为型模式" class="headerlink" title="3.3 行为型模式"></a>3.3 行为型模式</h3><h4 id="13-模板方法模式"><a href="#13-模板方法模式" class="headerlink" title="(13)模板方法模式"></a>(13)模板方法模式</h4><h4 id="14-命令模式"><a href="#14-命令模式" class="headerlink" title="(14)命令模式"></a>(14)命令模式</h4><h4 id="15-访问者模式"><a href="#15-访问者模式" class="headerlink" title="(15)访问者模式"></a>(15)访问者模式</h4><h4 id="16-迭代器模式"><a href="#16-迭代器模式" class="headerlink" title="(16)迭代器模式"></a>(16)迭代器模式</h4><h4 id="17-观察者模式"><a href="#17-观察者模式" class="headerlink" title="(17)观察者模式"></a><strong>(17)观察者模式</strong></h4><h4 id="18-中介者模式"><a href="#18-中介者模式" class="headerlink" title="(18)中介者模式"></a>(18)中介者模式</h4><h4 id="19-备忘录模式"><a href="#19-备忘录模式" class="headerlink" title="(19)备忘录模式"></a>(19)备忘录模式</h4><h4 id="20-解释器模式"><a href="#20-解释器模式" class="headerlink" title="(20)解释器模式"></a>(20)解释器模式</h4><h4 id="21-状态模式"><a href="#21-状态模式" class="headerlink" title="(21)状态模式"></a>(21)状态模式</h4><h4 id="22-策略模式"><a href="#22-策略模式" class="headerlink" title="(22)策略模式"></a>(22)策略模式</h4><h4 id="23-职责链模式"><a href="#23-职责链模式" class="headerlink" title="(23)职责链模式"></a>(23)职责链模式</h4>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>设计模式</tag>
        <tag>JAVA</tag>
      </tags>
  </entry>
  <entry>
    <title>Git学习笔记</title>
    <url>//d239c418.html</url>
    <content><![CDATA[<h2 id="版本控制"><a href="#版本控制" class="headerlink" title="版本控制"></a>版本控制</h2><p><code>git init</code>  初始化一个空的Git仓库</p>
<p><code>git add filename</code>  添加文件到git暂存区</p>
<p><code>git commit -m &quot;提交描述&quot;</code> 把暂存区的文件提交 </p>
<a id="more"></a>    

<p><code>git status</code>   查看工作目录,暂存区和版本库的区别状态</p>
<p><code>git diff</code>  查看文件差异 比较的是上次<code>git add</code>与当前的区别</p>
<p><code>git diff HEAD -- readme.txt </code>  查看工作区的readme和版本库里的readme的区别</p>
<p><code>git reset --hard commit_id</code> 重置到某个提交版本</p>
<p><code>git log</code>  查看<code>HEAD</code>及之前版本的提交历史 <code>--pretty=oneline</code> 参数使简洁</p>
<ul>
<li><code>HEAD</code>指向当前版本 <code>git reset --hard commit_id</code>回到历史版本或者把<code>commit_id替换</code>用<code>HEAD^</code>替换掉来代表前一个版本,<code>HEAD^^</code>前前一个,<code>HEAD~100</code>前一百个</li>
</ul>
<p><code>git reflog</code> 查看所有的命令历史  回退后还可以找到之后版本的commit id重置到之后的版本里</p>
<p><code>git reset HEAD &lt;file&gt;</code> 把暂存区的修改撤销掉（unstage），重新放回工作区(丢弃暂存区修改,保留工作区修改)</p>
<p><code>git restore filname</code> 把readme撤回到暂存区的状态,不在暂存区就撤回到版本库的状态(丢弃工作区的更改)</p>
<p><code>git rm</code>  从暂存区删除工作目录中已经删除掉的文件</p>
<p><code>git checkout -- filename</code>  从暂存区恢复工作目录中误删除的文件</p>
<ul>
<li>命令中的<code>--</code>很重要，没有<code>--</code>，就变成了“切换到另一个分支”的命令</li>
</ul>
<h2 id="使用远程仓库-GitHub"><a href="#使用远程仓库-GitHub" class="headerlink" title="使用远程仓库(GitHub)"></a>使用远程仓库(GitHub)</h2><h3 id="为本地仓库添加远程库"><a href="#为本地仓库添加远程库" class="headerlink" title="为本地仓库添加远程库"></a>为本地仓库添加远程库</h3><ul>
<li><p>创建并设置SSH连接</p>
</li>
<li><p>GitHub 创建新仓库</p>
</li>
<li><p>git remote add origin <a href="https://github.com/llario/learnGit.git">https://github.com/llario/learnGit.git</a> (添加远程库,取名origin)</p>
</li>
<li><p>git push -u origin master   把本地库的内容推送到远程，用<code>git push</code>命令，实际上是把当前分支<code>master</code>推送到远程。</p>
<p>由于远程库是空的，我们第一次推送<code>master</code>分支时，加上了<code>-u</code>参数，Git不但会把本地的<code>master</code>分支内容推送的远程新的<code>master</code>分支，还会把本地的<code>master</code>分支和远程的<code>master</code>分支关联起来，在以后的推送或者拉取时就可以简化命令。</p>
</li>
<li><p><code>git push origin master</code>  把本地<code>master</code>分支的最新修改推送至GitHub</p>
</li>
</ul>
<h3 id="从远程仓库克隆"><a href="#从远程仓库克隆" class="headerlink" title="从远程仓库克隆"></a>从远程仓库克隆</h3><ul>
<li>在GitHub上创建远程仓库</li>
<li>用<code>git clone git@github.com:llario/learnGit.git </code> 克隆远程仓库</li>
</ul>
<h3 id="连接协议"><a href="#连接协议" class="headerlink" title="连接协议"></a>连接协议</h3><p>SSH 速度快</p>
<p>HTTPS 速度慢 需要输入口令</p>
<h2 id="分支管理"><a href="#分支管理" class="headerlink" title="分支管理"></a>分支管理</h2><h3 id="分支管理-1"><a href="#分支管理-1" class="headerlink" title="分支管理"></a>分支管理</h3><p><code>git branch</code>  查看分支</p>
<p><code>git branch name</code>  创建分支</p>
<p><code>git swich name</code>  切换分支</p>
<p><code>git swich -c name</code> 创建加切换分支</p>
<p><code>git merge name</code> 合并某个分支到当前分支</p>
<ul>
<li><code>git merge --no-ff -m &quot;merge with no-ff&quot; dev</code></li>
<li>合并时不使用<code>Fast forward</code>模式, 可以保留分支的历史记录</li>
</ul>
<p><code>git branch -d name</code> 删除分支</p>
<ul>
<li><p>HEAD  默认指向master master指向提交 </p>
</li>
<li><p>切换分支时 HEAD指向分支 分支指向提交 更新版本时master不变 HEAD指向的分支向前移动</p>
</li>
<li><p>Fast-forward : 快进模式合并 直接把master指向分支</p>
</li>
<li><p>Git 合并出现冲突无法自动合并分支时，就必须首先解决冲突。解决冲突后，再提交，合并完成。</p>
<p>Git会把冲突的部分提示出来,需要进行手动修改,然后提交, 合并后的内容就是手动修改后的内容</p>
<p>用<code>git log --graph</code>命令可以看到分支合并图。<code>git log --graph --pretty=oneline --abbrev-commit</code></p>
</li>
<li><p>二进制文件冲突只能二选一</p>
</li>
</ul>
<h3 id="分支管理策略"><a href="#分支管理策略" class="headerlink" title="分支管理策略"></a>分支管理策略</h3><p><code>master</code>分支应该是非常稳定的，也就是仅用来发布新版本，平时不能在上面干活；</p>
<p>那在哪干活呢？干活都在<code>dev</code>分支上，也就是说，<code>dev</code>分支是不稳定的，到某个时候，比如1.0版本发布时，再把<code>dev</code>分支合并到<code>master</code>上，在<code>master</code>分支发布1.0版本；</p>
<p>你和你的小伙伴们每个人都在<code>dev</code>分支上干活，每个人都有自己的分支，时不时地往<code>dev</code>分支上合并就可以了。</p>
<p>所以，团队合作的分支看起来就像这样：</p>
<img src="/d239c418/0.jpg" class="" title="git-br-policy">



<p>合并分支时，加上<code>--no-ff</code>参数就可以用普通模式合并，合并后的历史有分支，能看出来曾经做过合并，而<code>fast forward</code>合并就看不出来曾经做过合并。</p>
<h3 id="Bug分支"><a href="#Bug分支" class="headerlink" title="Bug分支"></a>Bug分支</h3><p><code>git stash</code>  把当前分支工作目录和暂存区的状态冻结起来 以便于转换分支工作完成后恢复这个分支的状态</p>
<p><code>git stash list</code>  列出当前存过的状态</p>
<p><code>git stash apply stash@&#123;0&#125;</code>  恢复到某个状态</p>
<p><code>git stash drop stash@&#123;0&#125;</code>   删除某个保存的状态</p>
<p><code>git stash pop stash@&#123;0&#125;</code> 恢复到某个状态并删除保存的这个状态</p>
<p><code>git cherry-pick commit_id</code>  复制一个特定的提交到当前分支(修复bug)</p>
<ul>
<li><p>修复bug时，我们会通过创建新的bug分支进行修复，然后合并，最后删除；</p>
<p>当手头工作没有完成时，先把工作现场<code>git stash</code>一下，然后去修复bug，修复后，再<code>git stash pop</code>，回到工作现场；</p>
<p>在master分支上修复的bug，想要合并到当前dev分支，可以用<code>git cherry-pick &lt;commit&gt;</code>命令，把bug提交的修改“复制”到当前分支，避免重复劳动。</p>
</li>
</ul>
<h3 id="Feature分支"><a href="#Feature分支" class="headerlink" title="Feature分支"></a>Feature分支</h3><p><code>git branch -d featurename</code></p>
<p>假如分支还没有被合并，如果删除，将丢失掉修改，如果要强行删除，需要使用大写的<code>-D</code>参数。</p>
<h3 id="多人协作"><a href="#多人协作" class="headerlink" title="多人协作"></a>多人协作</h3><p><code>git remote </code> 查看远程库信息  参数-v更加详细  分别显示可以抓取和推送的仓库</p>
<p><code>git push origin master</code> 把分支master推送到远程仓库 也可以是别的分支</p>
<ul>
<li><code>master</code>分支是主分支，因此要时刻与远程同步；</li>
<li><code>dev</code>分支是开发分支，团队所有成员都需要在上面工作，所以也需要与远程同步；</li>
<li>bug分支只用于在本地修复bug，就没必要推到远程了，除非老板要看看你每周到底修复了几个bug；</li>
<li>feature分支是否推到远程，取决于你是否和你的小伙伴合作在上面开发。</li>
</ul>
<p>多人协作的工作模式通常是这样：</p>
<ol>
<li><p>首先，可以试图用<code>git push origin &lt;branch-name&gt;</code>推送自己的修改；</p>
</li>
<li><p>如果推送失败，则因为远程分支比你的本地更新，需要先用<code>git pull</code>试图合并；</p>
</li>
<li><p>如果合并有冲突，则解决冲突，并在本地提交；</p>
</li>
<li><p>没有冲突或者解决掉冲突后，再用<code>git push origin &lt;branch-name&gt;</code>推送就能成功！</p>
<p>如果<code>git pull</code>提示<code>no tracking information</code>，则说明本地分支和远程分支的链接关系没有创建，用命令<code>git branch --set-upstream-to &lt;branch-name&gt; origin/&lt;branch-name&gt;</code>。</p>
</li>
</ol>
<p>在本地创建和远程分支对应的分支，使用<code>git checkout -b branch-name origin/branch-name</code>，本地和远程分支的名称最好一致；</p>
<p>建立本地分支和远程分支的关联，使用<code>git branch --set-upstream branch-name origin/branch-name</code>；</p>
<p>从远程抓取分支，使用<code>git pull</code>，如果有冲突，要先处理冲突。</p>
<h3 id="Rebase"><a href="#Rebase" class="headerlink" title="Rebase"></a>Rebase</h3><p>待更新</p>
<h2 id="标签管理"><a href="#标签管理" class="headerlink" title="标签管理"></a>标签管理</h2><p>待更新</p>
<h2 id="在GitHub上操作"><a href="#在GitHub上操作" class="headerlink" title="在GitHub上操作:"></a>在GitHub上操作:</h2><ul>
<li>在GitHub上，可以任意Fork开源仓库；</li>
<li>自己拥有Fork后的仓库的读写权限,clone到本地进行修改；</li>
<li>把远程原作者的仓库【twbs/bootstrap】拉到本地，用Pull就行（Pull = Fetch+Merge）；</li>
<li>本地使用Rebase；</li>
<li>此时，本地【local/bootstrap】与远程原作者的仓库【twbs/bootstrap】就算是同步完了；</li>
<li>在本地使用PushOrigin推送到自己Fork出来的库【my/bootstrap】就行了；</li>
<li>最后，给原作者发送1个PullRequest的消息。</li>
<li>可以推送pull request给官方仓库来贡献代码。</li>
</ul>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Git</tag>
        <tag>工具</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>//c24675b4.html</url>
    <content><![CDATA[<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="概念"><a href="#概念" class="headerlink" title="概念"></a>概念</h3><ul>
<li><p>DB DataBase 数据库</p>
</li>
<li><p>DBMS DataBase Management System 数据库管理系统</p>
</li>
<li><p>SQL 结构化查询语言</p>
<a id="more"></a>

</li>
</ul>
<h3 id="表-Table"><a href="#表-Table" class="headerlink" title="表 Table"></a>表 Table</h3><ul>
<li>行: 数据/记录(data)</li>
<li>列:字段(column) 包括字段名,数据类型,相关的约束</li>
</ul>
<h3 id="SQL-语句分类"><a href="#SQL-语句分类" class="headerlink" title="SQL 语句分类"></a>SQL 语句分类</h3><ul>
<li><blockquote>
<p>DQL(Data Query Language) 数据查询语言<br>select,查询语句</p>
</blockquote>
</li>
<li><blockquote>
<p>DML(Data Manipulation Language) 数据操作语言<br>insert delete update 对表当中的数据进行增删改</p>
</blockquote>
</li>
<li><blockquote>
<p>DDL(Data Definition Language) 数据定义语言<br>create drop alter 对表结构的增删改</p>
</blockquote>
</li>
<li><blockquote>
<p>TCL(Transactional Control Language) 事务控制语言<br>commit 提交事务,rollback 回滚事务</p>
</blockquote>
</li>
<li><blockquote>
<p>DCL(Data Control Language) 数据控制语言<br>grant 授权,revoke 撤销权限</p>
</blockquote>
</li>
</ul>
<h3 id="基本操作"><a href="#基本操作" class="headerlink" title="基本操作"></a>基本操作</h3><ol>
<li>登录 <code>mysql -u 用户名 -p 密码</code></li>
<li>查看数据库 <code>show databases;</code></li>
<li>创建数据库 <code>create database xxx;</code></li>
<li>使用数据库 <code>user xxx;</code></li>
<li>查看当前数据库中的表 <code>show tables (from xxx);</code></li>
<li>初始化数据 <code>source D:\xx\xx.sql</code></li>
<li>查看表结构 <code>desc xx;</code></li>
<li>删除数据库 <code>drop database if exists xx;</code></li>
<li>查看创建表的语句 <code>show create table xx;</code></li>
</ol>
<h3 id="SQL-脚本"><a href="#SQL-脚本" class="headerlink" title="SQL 脚本"></a>SQL 脚本</h3><p>有大量的 SQL 语句,以.sql 为后缀的文件</p>
<h2 id="查询语句"><a href="#查询语句" class="headerlink" title="查询语句"></a>查询语句</h2><h3 id="简单查询"><a href="#简单查询" class="headerlink" title="简单查询"></a>简单查询</h3><p><code>select 字段名1,字段名2,... from 表名;</code><br><code>SELECT 字段名1,字段名2 AS 字段2别名 FROM emp;</code> 使用别名重命名</p>
<blockquote>
<p>标准 SQL 语句使用单引号包裹字符串</p>
</blockquote>
<p>去重:distinct select distinct 字段名 from …</p>
<p><code>select 字段名1,字段名2,... from 表名 where 条件;</code></p>
<p>条件符号:&gt; &lt; = !=(&lt;&gt;) and between..and..(闭区间,左小右大) is not null or(相当于多个 or) in like(支持%_模糊匹配)</p>
<blockquote>
<p>运算符优先级不确定时使用小括号</p>
</blockquote>
<p><code>select xx from emp order by 字段 1 asc 字段 2 desc</code><br>排序: asc 升序(默认),desc 降序</p>
<h3 id="分组函数-多行处理函数"><a href="#分组函数-多行处理函数" class="headerlink" title="分组函数(多行处理函数)"></a>分组函数(多行处理函数)</h3><ul>
<li><p>count 计数</p>
</li>
<li><p>sum 求和</p>
</li>
<li><p>avg 平均值</p>
</li>
<li><p>max 最大值</p>
</li>
<li><p>min 最小值</p>
<blockquote>
<p>where 后面不能用分组函数<br>select sum(sal) from emp;</p>
</blockquote>
</li>
</ul>
<blockquote>
<p>有 NULL 的表达式结果为 NULL<br>分组函数自动忽略 NULL</p>
</blockquote>
<p>ifnull() 可能为 NULL 的数据,被当做什么<br><code>ifnull(comm,0)</code><br><code>select ename,ifnull(comm,0) from emp</code></p>
<ul>
<li>group by 按照某个字段或者某些字段进行分组</li>
<li>having 对分组之后的数据再次进行过滤</li>
</ul>
<blockquote>
<p>groupby 在 where 后面执行<br>分组函数在 groupby 后面执行<br>执行顺序: from where groupby having select orderby<br>where 后面不能用分组函数</p>
</blockquote>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p><code>select .. from .. where .. group by .. having .. order by ..limit ..</code><br>顺序不能乱</p>
<h3 id="连接查询"><a href="#连接查询" class="headerlink" title="连接查询"></a>连接查询</h3><p>多张表连接查询<br>sql92 语法:<code>select e.ename,d.dname from emp e,dept d;</code> 使用别名执行效率高,可读性好<br>sql99 语法:<code>select e.ename,d.dname from emp e join dept d on e.deptno = d.deptno</code></p>
<h3 id="笛卡尔乘积现象"><a href="#笛卡尔乘积现象" class="headerlink" title="笛卡尔乘积现象"></a>笛卡尔乘积现象</h3><p>两张表连接查询时,如果没有任何条件限制,最终的结果是两张表记录条数的乘积</p>
<h3 id="内连接"><a href="#内连接" class="headerlink" title="内连接"></a>内连接</h3><h4 id="等值连接"><a href="#等值连接" class="headerlink" title="等值连接"></a>等值连接</h4><p>条件是等值关系</p>
<h4 id="非等值连接"><a href="#非等值连接" class="headerlink" title="非等值连接"></a>非等值连接</h4><p>条件是非等量关系</p>
<h4 id="自连接"><a href="#自连接" class="headerlink" title="自连接"></a>自连接</h4><p>一张表看做两张表,自己连接自己</p>
<h3 id="外连接"><a href="#外连接" class="headerlink" title="外连接"></a>外连接</h3><p>两种表中有一张是主表,一张表是副表,主要查询主表中的数据,捎带着查询副表,当副表中的数据没有和主表中的数据匹配上,副表自动模拟出 NULL 与之匹配.</p>
<h4 id="左外连接"><a href="#左外连接" class="headerlink" title="左外连接"></a>左外连接</h4><p><code>left join</code></p>
<h4 id="右外连接"><a href="#右外连接" class="headerlink" title="右外连接"></a>右外连接</h4><p><code>right join</code></p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">select</span></span><br><span class="line">   d.*</span><br><span class="line"><span class="keyword">from</span></span><br><span class="line">  emp e</span><br><span class="line"><span class="keyword">right</span> <span class="keyword">join</span></span><br><span class="line">  dept d</span><br><span class="line"><span class="keyword">on</span></span><br><span class="line">  e.deptno = d.deptno</span><br><span class="line"><span class="keyword">where</span></span><br><span class="line">  e.empno <span class="keyword">is</span> <span class="literal">null</span></span><br></pre></td></tr></table></figure>

<h3 id="子查询"><a href="#子查询" class="headerlink" title="子查询"></a>子查询</h3><p>select 语句中嵌套 select 语句</p>
<h3 id="union"><a href="#union" class="headerlink" title="union"></a>union</h3><p>把多个查询的结果合并起来显示</p>
<h3 id="limit-分页查询"><a href="#limit-分页查询" class="headerlink" title="limit 分页查询"></a>limit 分页查询</h3><p>limit (startIndex) length<br>limit 是 SQL 语句中最后执行的一个环节</p>
<h2 id="表的创建"><a href="#表的创建" class="headerlink" title="表的创建"></a>表的创建</h2><p><code>create table 表名( 字段名 1 数据类型, 字段名 2 数据类型 );</code></p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>int 整数型</li>
<li>bigint 长整型</li>
<li>float 浮点型</li>
<li>char 定长字符串</li>
<li>varchar 可变长字符串</li>
<li>date 日期(对应 java.sql.Date)</li>
<li>BLOB 二进制大对象(图片视频)Binary Large OBject</li>
<li>CLOB 字符大对象(较大文本) Character Large OBject</li>
</ul>
<h2 id="插入数据"><a href="#插入数据" class="headerlink" title="插入数据"></a>插入数据</h2><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">insert</span> <span class="keyword">into</span> 表名(字段 <span class="number">1</span>,字段 <span class="number">2</span>,字段 <span class="number">3</span>)</span><br><span class="line"><span class="keyword">values</span>(</span><br><span class="line">  值 <span class="number">1</span>,</span><br><span class="line">  值 <span class="number">2</span> <span class="keyword">default</span> xx,</span><br><span class="line">  值 <span class="number">3</span></span><br><span class="line">  )</span><br></pre></td></tr></table></figure>

<blockquote>
<p>字段可以不写,但后面的值必须完全匹配表中所有字段</p>
</blockquote>
<h2 id="更改数据"><a href="#更改数据" class="headerlink" title="更改数据"></a>更改数据</h2><h3 id="复制表"><a href="#复制表" class="headerlink" title="复制表"></a>复制表</h3><p><code>create table 表名 as select ..</code> 把查询结果作为一张表创建<br><code>insert into 表名 select ..</code> 把查询结果插入到表中</p>
<h3 id="修改数据"><a href="#修改数据" class="headerlink" title="修改数据"></a>修改数据</h3><p><code>update 表名 set 字段名1 = 值1, 字段名2 = 值2 where 条件</code> 没有条件整张表数据全部更新</p>
<h2 id="删除数据-逻辑删除"><a href="#删除数据-逻辑删除" class="headerlink" title="删除数据(逻辑删除)"></a>删除数据(逻辑删除)</h2><p><code>delete from 表名 where 条件</code></p>
<h3 id="删除表"><a href="#删除表" class="headerlink" title="删除表"></a>删除表</h3><p><code>drop table if exists xx</code></p>
<h3 id="删除大表-无法恢复"><a href="#删除大表-无法恢复" class="headerlink" title="删除大表(无法恢复)"></a>删除大表(无法恢复)</h3><p><code>truncate table 表名</code> (只留下表头)</p>
<h2 id="更改表结构"><a href="#更改表结构" class="headerlink" title="更改表结构"></a>更改表结构</h2><p>少用,使用工具完成</p>
<h2 id="约束"><a href="#约束" class="headerlink" title="约束"></a>约束</h2><ul>
<li>主键约束(primary key) 非空不重复</li>
<li>唯一约束(unique)</li>
<li>非空约束(not null)</li>
<li>外键约束(foreign key)</li>
<li>检查约束(check) Oracle 有,mysql 没有</li>
</ul>
<p>对多个列添加唯一约束: unique(字段 1,字段 2)<br>主键值自增: primary key auto_increment (从 1 开始)<br>外键约束: 值必须为另一个字段上存在的值 foreign key(字段 1) references 表名(字段 2)</p>
]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>Redis</title>
    <url>//bae4ff13.html</url>
    <content><![CDATA[<h2 id="NoSQL"><a href="#NoSQL" class="headerlink" title="NoSQL"></a>NoSQL</h2><ul>
<li>Not Only SQL 非关系型数据库</li>
</ul>
<a id="more"></a>

<h3 id="四大分类"><a href="#四大分类" class="headerlink" title="四大分类"></a>四大分类</h3><ol>
<li>KV 键值对 Redis</li>
<li>文档型数据库(bson 格式) MongoDB</li>
<li>列存储数据库 HBase 分布式文件系统</li>
<li>图关系数据库 Neo4j InfoGrid</li>
</ol>
<h3 id="特性"><a href="#特性" class="headerlink" title="特性"></a>特性</h3><ul>
<li>可扩容,可伸缩</li>
<li>大数据量下高性能</li>
<li>灵活的数据结构</li>
<li>高可用</li>
</ul>
<h2 id="Redis-特性"><a href="#Redis-特性" class="headerlink" title="Redis 特性"></a>Redis 特性</h2><p>Redis(REmote Dictionary Server) 远程字典服务</p>
<blockquote>
<p>作用</p>
</blockquote>
<ul>
<li>热点数据加速查询, 比如热点商品,热点新闻等</li>
<li>任务队列, 比如秒杀/抢购/购票排队</li>
<li>即时信息查询, 比如排行榜/访问统计/在线人数统计</li>
<li>时效性信息控制, 比如验证码控制</li>
<li>分布式数据共享, 比如分布式集群架构中的session分离</li>
<li>消息队列</li>
<li>分布式锁</li>
</ul>
<blockquote>
<p>特性</p>
</blockquote>
<ul>
<li>数据之间没有必然的关联关系</li>
<li>内部采用单线程进行工作</li>
<li>高性能</li>
<li>多数据类型支持</li>
<li>持久化支持,可以进行数据灾难恢复</li>
</ul>
<h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><ul>
<li>字符串(String)</li>
<li>哈希(Hash)</li>
<li>列表(List)</li>
<li>集合(Set)</li>
<li>有序集合(Sorted Set)</li>
</ul>
<h4 id="字符串-String"><a href="#字符串-String" class="headerlink" title="字符串(String)"></a>字符串(String)</h4><p>存储单个数据, 一个空间存储一个数据, 如果数据用整数的形式, 可以作为数字操作</p>
<p>格式: <code>key:value</code></p>
<ul>
<li><p>添加/修改数据: <code>set key value</code></p>
</li>
<li><p>获取数据: <code>get key</code></p>
</li>
<li><p>删除数据: <code>del key</code></p>
</li>
<li><p>添加获取多个数据: <code>mset/mget</code></p>
</li>
<li><p>获取字符数据个数(字符串长度): <code>strlen key</code></p>
</li>
<li><p>追加信息(原始信息存在-追加, 否则新建): <code>append key value</code></p>
</li>
<li><p>数值数据增加指定范围</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">incr key</span><br><span class="line">incrby key increment</span><br><span class="line">incrbyfloat key increment</span><br></pre></td></tr></table></figure>

<blockquote>
<p>数值类型最大值:Long.MAX_VALUE, 如果原始数据无法转化成数值或者超过了数值上限,将会报错</p>
</blockquote>
</li>
<li><p>数值减少指定范围的值</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">decr key</span><br><span class="line">decrby key increment</span><br></pre></td></tr></table></figure></li>
<li><p>设置数值的生命周期</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">setex key second value</span><br><span class="line">psetex key milliseconds value</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="哈希-Hash"><a href="#哈希-Hash" class="headerlink" title="哈希(Hash)"></a>哈希(Hash)</h4><p>一个存储空间保存多个键值对数据,底层使用哈希表结构实现数据存储</p>
<img src="/bae4ff13/image-20210311185812-kzlo77p.png" class="" title="image.png">

<ul>
<li>添加/修改数据: <code>hset key field value</code></li>
<li>获取数据: <code>hget key field</code>  <code>hgetall key</code></li>
<li>删除数据: <code>hdel key field1 [field2]</code></li>
<li>添加/修改多个数据: <code>hmset key field1 value1 field2 value2 ..</code></li>
<li>获取多个数据: <code>hmget key field1 field2 ...</code></li>
<li>获取哈希表中字段的数量: <code>hlen key</code></li>
<li>获取哈希表中是否存在指定的字段 <code>hexists key field</code></li>
<li>获取哈希表中所有的字段名或者字段值: <code>hkeys key</code> <code>hvals key</code></li>
<li>设置指定字段的数值数据增加指定范围的值: <code>hincrby key field increment</code> <code>hincrbyfloat key field increment</code></li>
<li>添加数据,如果已经存在就会添加失败: <code>hsetnx key field value</code></li>
</ul>
<blockquote>
<ul>
<li>哈希类型下的value只能存储字符串 不能嵌套</li>
<li>每个hash可以存储2**32 - 1 个键值对</li>
</ul>
</blockquote>
<h4 id="列表-List"><a href="#列表-List" class="headerlink" title="列表(List)"></a>列表(List)</h4><p>一个存储空间保存多个数据,且通过数据可以体现进入顺序,底层通过双向链表实现</p>
<img src="/bae4ff13/image-20210311202359-bi3t8gb.png" class="" title="image.png">

<ul>
<li><p>添加/修改数据:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lpush key value1 [value2] ...</span><br><span class="line">rpush key value1 [value2] ...</span><br></pre></td></tr></table></figure></li>
<li><p>获取数据:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrange key start stop</span><br><span class="line">lindex key index</span><br><span class="line">llen key</span><br></pre></td></tr></table></figure></li>
<li><p>获取并移除数据:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lpop key</span><br><span class="line">rpop key</span><br></pre></td></tr></table></figure></li>
<li><p>限定时间内获取并移除数据(阻塞):</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">blpop key1 [key2] timeout</span><br><span class="line">brpop key1 [key2] timeout</span><br><span class="line">brpoplpish source destination timeout &#x2F;&#x2F;移除列表的最后一个元素，并将该元素添加到另一个列表并返回。</span><br></pre></td></tr></table></figure></li>
<li><p>移除指定元素:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">lrem key count value</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>list中保存的数据都是string类型,最多2**32 -1</p>
<p>list有索引,但一般作为队列或者栈使用,结束索引为-1</p>
<p>list可以进行分页操作, limit</p>
</blockquote>
<h4 id="集合-Set"><a href="#集合-Set" class="headerlink" title="集合(Set)"></a>集合(Set)</h4><p>用来存储大量数据, 也便于查询, 结构与hash完全相同, 仅存储(hash)键,而且值不允许重复</p>
<img src="/bae4ff13/image-20210311203713-1m5l4bv.png" class="" title="image.png">

<ul>
<li><p>添加数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sadd key member1 [member2] ...</span><br></pre></td></tr></table></figure></li>
<li><p>获取全部数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smembers key</span><br></pre></td></tr></table></figure></li>
<li><p>删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srem key member1 [member2] ...</span><br></pre></td></tr></table></figure></li>
<li><p>获取集合数据总量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">scard key</span><br></pre></td></tr></table></figure></li>
<li><p>判断集合中是否包含指定数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sismember key member</span><br></pre></td></tr></table></figure></li>
<li><p>随机获取集合中指定数量的数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">srandmember key [count]</span><br></pre></td></tr></table></figure></li>
<li><p>随机获取集合中的某个数据并将该数据移出集合</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">spop key [count]</span><br></pre></td></tr></table></figure></li>
<li><p>求两个集合的交集/并集/差集</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sinter key1 [key2]</span><br><span class="line">sunion key1 [key2]</span><br><span class="line">sdiff key1 [key2]</span><br></pre></td></tr></table></figure></li>
<li><p>求两个集合的交集/并集/差集并保存的指定集合里</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sinterstore destination key1 [key2]</span><br><span class="line">sunionstore destination key1 [key2]</span><br><span class="line">sdiffstore destination key1 [key2]</span><br></pre></td></tr></table></figure></li>
<li><p>将指定数据中原始集合移动到目标集合里面</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">smove source destination member</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="有序集合-Sorted-Set"><a href="#有序集合-Sorted-Set" class="headerlink" title="有序集合(Sorted Set)"></a>有序集合(Sorted Set)</h4><p>在set的存储结构基础上添加可排序字段</p>
<img src="/bae4ff13/image-20210311204617-d8qsvn3.png" class="" title="image.png">

<ul>
<li><p>添加数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zadd key score1 member1 [score2 member2]</span><br></pre></td></tr></table></figure></li>
<li><p>获取全部数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrange key start stop [WITHSCORES]</span><br><span class="line">zrevrange key start stop [WITHSCORES]</span><br></pre></td></tr></table></figure></li>
<li><p>删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrem key member [member …]</span><br></pre></td></tr></table></figure></li>
<li><p>按条件获取数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrangebyscore key min max [WITHSCORES] [LIMIT]</span><br><span class="line">zrevrangebyscore key max min [WITHSCORES]</span><br></pre></td></tr></table></figure></li>
<li><p>条件删除数据</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zremrangebyrank key start stop</span><br><span class="line">zremrangebyscore key min max</span><br></pre></td></tr></table></figure></li>
<li><p>获取集合数据总量</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zcard key</span><br><span class="line">zcount key min max</span><br></pre></td></tr></table></figure></li>
<li><p>集合交并操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zinterstore destination numkeys key [key …]</span><br><span class="line">zunionstore destination numkeys key [key …]</span><br></pre></td></tr></table></figure></li>
<li><p>获取数据对应的索引</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zrank key member</span><br><span class="line">zrevrank key member</span><br></pre></td></tr></table></figure></li>
<li><p>score值获取与修改</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">zscore key member</span><br><span class="line">zincrby key increment member</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="通用指令"><a href="#通用指令" class="headerlink" title="通用指令"></a>通用指令</h3><h4 id="key通用指令"><a href="#key通用指令" class="headerlink" title="key通用指令"></a>key通用指令</h4><ul>
<li><p>删除指定key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">del key</span><br></pre></td></tr></table></figure></li>
<li><p>获取key是否存在</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exists key</span><br></pre></td></tr></table></figure></li>
<li><p>获取key的类型</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">type key</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="key扩展操作-时效操作"><a href="#key扩展操作-时效操作" class="headerlink" title="key扩展操作(时效操作)"></a>key扩展操作(时效操作)</h4><ul>
<li><p>为指定key设置有效期</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">expire key seconds</span><br><span class="line">pexpire key milliseconds</span><br><span class="line">expireat key timestamp</span><br><span class="line">pexpireat key millinseconds-timestamp</span><br></pre></td></tr></table></figure></li>
<li><p>获取key有效时间</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">ttl key</span><br><span class="line">pttl key</span><br></pre></td></tr></table></figure></li>
<li><p>切换key从时效性转换为永久性</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">persist key</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h4 id="key扩展操作"><a href="#key扩展操作" class="headerlink" title="key扩展操作"></a>key扩展操作</h4><ul>
<li><p>查询key</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">keys pattern</span><br></pre></td></tr></table></figure>

<img src="/bae4ff13/image-20210314151704-akofa1o.png" class="" title="image.png">

</li>
</ul>
<h4 id="key其他操作"><a href="#key其他操作" class="headerlink" title="key其他操作"></a>key其他操作</h4><ul>
<li><p>为key改名</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">rename key newkey &#x2F;&#x2F;如果已经有newkey的数据，直接覆盖</span><br><span class="line">renamenx key newkey &#x2F;&#x2F;如果已经有，则失败</span><br></pre></td></tr></table></figure></li>
<li><p>对所有key排序</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">sort</span><br></pre></td></tr></table></figure></li>
<li><p>其他key通用操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">help @generic</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h3 id="数据库通用操作"><a href="#数据库通用操作" class="headerlink" title="数据库通用操作"></a>数据库通用操作</h3><p>Redis为每个服务器提供16个数据库, 编号从0-15</p>
<p>每个数据库之间相互独立</p>
<ul>
<li><p>切换数据库</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">select index</span><br></pre></td></tr></table></figure></li>
<li><p>其他操作</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">quit</span><br><span class="line">ping</span><br><span class="line">echo message</span><br></pre></td></tr></table></figure></li>
<li><p>数据移动</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">move key db</span><br></pre></td></tr></table></figure></li>
<li><p>数据清除</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">dbsize</span><br><span class="line">flushdb</span><br><span class="line">flushall</span><br></pre></td></tr></table></figure>

</li>
</ul>
<h2 id="Jedis操作Redis数据库"><a href="#Jedis操作Redis数据库" class="headerlink" title="Jedis操作Redis数据库"></a>Jedis操作Redis数据库</h2><p>略</p>
<h2 id="Redis持久化"><a href="#Redis持久化" class="headerlink" title="Redis持久化"></a>Redis持久化</h2><ul>
<li>RDB 快照形式,全量保存</li>
<li>AOF 存储操作指令 增量保存</li>
</ul>
<h3 id="RDB保存"><a href="#RDB保存" class="headerlink" title="RDB保存"></a>RDB保存</h3><p>命令:</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">save  &#x2F;&#x2F;手动执行一次保存</span><br><span class="line">bgsave  &#x2F;&#x2F;手动执行后进入后台执行操作</span><br></pre></td></tr></table></figure>

<ul>
<li><p>优点</p>
<blockquote>
<p>二进制文件,存储效率高</p>
<p>存储的是某个时间的数据快照,适合数据备份,全量复制<br>恢复速度快</p>
</blockquote>
</li>
<li><p>缺点</p>
<blockquote>
<p>无法做到实时持久化,容易丢失数据<br>每次运行都要fork操作创建子进程,牺牲部分性能<br>不同版本格式不兼容</p>
</blockquote>
</li>
</ul>
<h3 id="AOF保存"><a href="#AOF保存" class="headerlink" title="AOF保存"></a>AOF保存</h3><ul>
<li>AOF持久化：以独立日志的方式记录每次写命令，重启时再重新执行AOF文件中命令达到恢复数据的目的。与RDB相比可以简单描述为改记录数据产生的过程</li>
<li>AOF的主要作用是解决了数据持久化的实时性，目前已经是Redis持久化的主流方式</li>
</ul>
<p>AOF写数据三种策略<br>always(每次)<br>每次写入操作均同步到AOF文件中，数据零误差，性能较低<br>everysec(每秒)<br>每秒将缓冲区中的指令同步到AOF文件中，数据准确性高，性能较高<br>再系统突然当即的情况下丢失1秒内的数据<br>no(系统控制)<br>由操作系统每次同步到AOF文件的周期，整体过程不可控</p>
<ul>
<li><p>AOF重写</p>
<blockquote>
<p>将同样一个数据的若干个命令执行结果转换为最终结果数据对应的指令进行记录,压缩文件体积</p>
</blockquote>
</li>
</ul>
<h2 id="事务"><a href="#事务" class="headerlink" title="事务"></a>事务</h2><ul>
<li><p>开启事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">multi</span><br></pre></td></tr></table></figure></li>
<li><p>执行事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">exec</span><br></pre></td></tr></table></figure></li>
<li><p>取消事务</p>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">discard</span><br></pre></td></tr></table></figure>

</li>
</ul>
<blockquote>
<p>事务过程中发生语法错误时,整体事务不会被执行<br>命令正确但是运行时发生错误时,能够执行的会执行,发生错误的不会执行,运行错误的那些指令无法自动回归,需要提前备份手动回滚</p>
</blockquote>
<h2 id="Redis删除策略"><a href="#Redis删除策略" class="headerlink" title="Redis删除策略"></a>Redis删除策略</h2><p>过期数据的删除</p>
<h3 id="删除策略"><a href="#删除策略" class="headerlink" title="删除策略"></a>删除策略</h3><p>数据状态:</p>
<ul>
<li>xx: 有时效性的uuju</li>
<li>-1: 永久有效的数据</li>
<li>-2: 过期但是没有删除的数据,或者没定义的数据</li>
</ul>
<p>数据删除策略:</p>
<ol>
<li>定时删除: 过期时间到达时立刻删除</li>
<li>惰性删除: 数据下次被访问时删除</li>
<li>定期删除: 周期性的轮询数据,随机抽取,根据过期数据的比例决定是否删除</li>
</ol>
<p>内存不足时的删除策略</p>
<h3 id="逐出策略"><a href="#逐出策略" class="headerlink" title="逐出策略"></a>逐出策略</h3><ol>
<li>volatile-lru：挑选最近最少使用的数据淘汰</li>
<li>volatile-lfu：挑选最近使用次数最少的数据淘汰</li>
<li>volatile-ttl ：挑选将要过期的数据淘汰</li>
<li>volatile-random：任意选择数据淘汰</li>
<li>allkeys-lru：挑选最近最少使用的数据淘汰</li>
<li>allkeys-lfu：挑选最近使用次数最少的数据淘汰</li>
<li>allkeys-random：任意选择数据淘汰,放弃数据驱逐</li>
<li>no-enviction（驱逐）：禁止驱逐数据（redis4.0默认策略），会引发错误OOM（OutOfMemory）</li>
</ol>
<h2 id="高级数据结构"><a href="#高级数据结构" class="headerlink" title="高级数据结构"></a>高级数据结构</h2><h3 id="Bitmaps"><a href="#Bitmaps" class="headerlink" title="Bitmaps"></a>Bitmaps</h3><h3 id="GEO"><a href="#GEO" class="headerlink" title="GEO"></a>GEO</h3><h3 id="HyperLogLog"><a href="#HyperLogLog" class="headerlink" title="HyperLogLog"></a>HyperLogLog</h3><h2 id="主从复制"><a href="#主从复制" class="headerlink" title="主从复制"></a>主从复制</h2><h2 id="Redis哨兵"><a href="#Redis哨兵" class="headerlink" title="Redis哨兵"></a>Redis哨兵</h2>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>数据库</tag>
        <tag>Redis</tag>
      </tags>
  </entry>
  <entry>
    <title>Rust学习笔记</title>
    <url>//d2bf970.html</url>
    <content><![CDATA[<p>系统级语言,无GC,并发安全和内存安全,现代化的包管理工具,开放活跃的社区</p>
<blockquote>
<p>Hello World ~</p>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;Hello, world!&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

 <a id="more"></a>

<h2 id="常见编程概念"><a href="#常见编程概念" class="headerlink" title="常见编程概念"></a>常见编程概念</h2><h3 id="变量与可变性"><a href="#变量与可变性" class="headerlink" title="变量与可变性"></a>变量与可变性</h3><p>使用<code>let</code>声明变量,变量默认不可变,使用<code>mut</code>使可变</p>
<p>重复声明变量会发生变量遮罩(shadowing)</p>
<h3 id="数据类型"><a href="#数据类型" class="headerlink" title="数据类型"></a>数据类型</h3><h4 id="标量型"><a href="#标量型" class="headerlink" title="标量型"></a>标量型</h4><h5 id="整型"><a href="#整型" class="headerlink" title="整型"></a>整型</h5><table>
<thead>
<tr>
<th align="left">长度</th>
<th align="left">有符号</th>
<th align="left">无符号</th>
</tr>
</thead>
<tbody><tr>
<td align="left">8-bit</td>
<td align="left"><code>i8</code></td>
<td align="left"><code>u8</code></td>
</tr>
<tr>
<td align="left">16-bit</td>
<td align="left"><code>i16</code></td>
<td align="left"><code>u16</code></td>
</tr>
<tr>
<td align="left">32-bit</td>
<td align="left"><code>i32</code>(默认)</td>
<td align="left"><code>u32</code></td>
</tr>
<tr>
<td align="left">64-bit</td>
<td align="left"><code>i64</code></td>
<td align="left"><code>u64</code></td>
</tr>
<tr>
<td align="left">128-bit</td>
<td align="left"><code>i128</code></td>
<td align="left"><code>u128</code></td>
</tr>
<tr>
<td align="left">arch(依赖于运行时计算机架构)</td>
<td align="left"><code>isize</code></td>
<td align="left"><code>usize</code></td>
</tr>
</tbody></table>
<h5 id="浮点型"><a href="#浮点型" class="headerlink" title="浮点型"></a>浮点型</h5><p><code>f32</code>和<code>f64</code>   推荐<code>f64</code></p>
<h5 id="布尔型"><a href="#布尔型" class="headerlink" title="布尔型"></a>布尔型</h5><p><code>true</code> 和<code>false</code> </p>
<h5 id="字符类型"><a href="#字符类型" class="headerlink" title="字符类型"></a>字符类型</h5><p><code>char</code>  使用Unicode编码</p>
<h4 id="复合类型"><a href="#复合类型" class="headerlink" title="复合类型"></a>复合类型</h4><p>Rust的复合类型都是异构的</p>
<h5 id="元组-turple"><a href="#元组-turple" class="headerlink" title="元组 ( turple )"></a>元组 ( turple )</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> tup: (<span class="built_in">i32</span>, <span class="built_in">f64</span>, <span class="built_in">u8</span>) = (<span class="number">500</span>, <span class="number">6.4</span>, <span class="number">1</span>); <span class="comment">//指定类型创建元组</span></span><br><span class="line"><span class="keyword">let</span> (x, y, z) = tup; <span class="comment">//解构</span></span><br><span class="line"><span class="keyword">let</span> five_hundred = tup.<span class="number">0</span>; <span class="comment">//指定索引访问</span></span><br></pre></td></tr></table></figure>

<h5 id="数组-array"><a href="#数组-array" class="headerlink" title="数组 ( array )"></a>数组 ( array )</h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> a: [<span class="built_in">i32</span>; <span class="number">5</span>] = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]; <span class="comment">//指定类型和各个位置元素的值</span></span><br><span class="line"><span class="keyword">let</span> first = a[<span class="number">0</span>]; <span class="comment">//按索引访问</span></span><br><span class="line"><span class="keyword">let</span> b = [<span class="number">3</span>; <span class="number">5</span>]; <span class="comment">//5个3 [T;num]</span></span><br></pre></td></tr></table></figure>

<h3 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h3><p>使用关键字<code>fn</code>声明函数</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">five</span></span>() -&gt; <span class="built_in">i32</span> &#123;</span><br><span class="line">    <span class="number">5</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>语句与表达式: </p>
<p>语句是一条执行的命令,以分号结束. 表达式是一个值/字面量, 语句块默认以最后的表达式作为返回值</p>
</blockquote>
<h3 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h3><p>使用<code>//</code>作为单行注释,使用<code>/* */</code>作为多行注释   </p>
<p>文档注释 <strong>待补充</strong></p>
<h3 id="控制流"><a href="#控制流" class="headerlink" title="控制流"></a>控制流</h3><h4 id="if-条件表达式"><a href="#if-条件表达式" class="headerlink" title="if 条件表达式"></a><code>if</code> 条件表达式</h4><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> number % <span class="number">4</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 4&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> number % <span class="number">3</span> == <span class="number">0</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is divisible by 3&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;number is not divisible by 4, 3, or 2&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">let</span> number = <span class="keyword">if</span> condition &#123; <span class="number">5</span> &#125; <span class="keyword">else</span> &#123; <span class="number">6</span> &#125;;  <span class="comment">//if表达式有返回值</span></span><br></pre></td></tr></table></figure>

<h4 id="循环"><a href="#循环" class="headerlink" title="循环"></a>循环</h4><h5 id="loop"><a href="#loop" class="headerlink" title="loop"></a><code>loop</code></h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">loop</span> &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;again!&quot;</span>);  <span class="comment">//无限循环</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> result = <span class="keyword">loop</span> &#123;</span><br><span class="line">        counter += <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> counter == <span class="number">10</span> &#123;</span><br><span class="line">            <span class="keyword">break</span> counter * <span class="number">2</span>;  <span class="comment">//返回值</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure>

<h5 id="while"><a href="#while" class="headerlink" title="while"></a><code>while</code></h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">while</span> number != <span class="number">0</span> &#123;</span><br><span class="line">       <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);</span><br><span class="line">       number = number - <span class="number">1</span>;</span><br><span class="line">   &#125;</span><br></pre></td></tr></table></figure>

<h5 id="for"><a href="#for" class="headerlink" title="for"></a><code>for</code></h5><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> element <span class="keyword">in</span> a.iter() &#123;</span><br><span class="line">              <span class="keyword">let</span> a = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">50</span>];</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;the value is: &#123;&#125;&quot;</span>, element);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> number <span class="keyword">in</span> (<span class="number">1</span>..<span class="number">4</span>).rev() &#123;</span><br><span class="line">        <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;!&quot;</span>, number);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<h2 id="所有权"><a href="#所有权" class="headerlink" title="所有权"></a>所有权</h2><p>让Rust无需GC的同时实现安全的内存管理</p>
<h4 id="栈-Stack-和堆-Heap"><a href="#栈-Stack-和堆-Heap" class="headerlink" title="栈(Stack)和堆(Heap)"></a>栈(Stack)和堆(Heap)</h4><p>栈中数据后进先出,所有数据必须已知固定大小,分配内存更快</p>
<p>堆上的数据是大小可能变化的数据,空间分配灵活但缺乏组织,访问更慢</p>
<p>调用函数时,函数压入栈,函数中的变量放在堆上</p>
<h3 id="所有权规则"><a href="#所有权规则" class="headerlink" title="所有权规则"></a>所有权规则</h3><blockquote>
<ol>
<li>Rust 中的每一个值都有一个被称为其 <strong>所有者</strong>（<em>owner</em>）的变量。</li>
<li>值在任一时刻有且只有一个所有者。</li>
<li>当所有者（变量）离开作用域，这个值将被丢弃。</li>
</ol>
</blockquote>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);  <span class="comment">// s 进入作用域,获得字符串的所有权</span></span><br><span class="line">    takes_ownership(s);             <span class="comment">//s的所有权移动到函数里,s失效</span></span><br><span class="line">         <span class="keyword">let</span> s1 = gives_ownership();         <span class="comment">// s1获得一个字符串的所有权</span></span><br><span class="line">    <span class="keyword">let</span> s2 = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);     <span class="comment">// s2 进入作用域</span></span><br><span class="line">    <span class="keyword">let</span> s3 = takes_and_gives_back(s2);  <span class="comment">// s2 的所有权被转移到函数中,函数转移所有权到s3中</span></span><br><span class="line">&#125; <span class="comment">//s s2 已经没有所有权,没有动作,s1 s3 回收内存</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_ownership</span></span>(some_string: <span class="built_in">String</span>) &#123; <span class="comment">//获得一个字符串的所有权,之后所有权随作用域消失</span></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125;&quot;</span>, some_string);</span><br><span class="line">&#125;  <span class="comment">// 这里，some_string 移出作用域并调用 `drop` 方法。占用的内存被释放</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">gives_ownership</span></span>() -&gt; <span class="built_in">String</span> &#123;             <span class="comment">// gives_ownership 将返回值移动给调用它的函数</span></span><br><span class="line">    <span class="keyword">let</span> some_string = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>); <span class="comment">// some_string 进入作用域.</span></span><br><span class="line">    some_string                              <span class="comment">// 返回 some_string 并移出给调用的函数</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 返回 a_string 并移出给调用的函数</span></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">takes_and_gives_back</span></span>(a_string: <span class="built_in">String</span>) -&gt; <span class="built_in">String</span> &#123;</span><br><span class="line">    a_string</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="引用和借用"><a href="#引用和借用" class="headerlink" title="引用和借用"></a>引用和借用</h3><p><code>&amp;</code> 获取一个变量的值,但不获得它的所有权,称为引用</p>
<p>获取引用作为函数参数称为 <strong>借用</strong>（<em>borrowing</em>）</p>
<p>引用默认不可变,只能有一个可变引用或者多个不可变引用,引用必须总是有效的(避免悬垂引用)</p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> r1 = &amp;s; <span class="comment">// 没问题</span></span><br><span class="line"><span class="keyword">let</span> r2 = &amp;s; <span class="comment">// 多个不可变引用,没问题</span></span><br><span class="line"><span class="built_in">println!</span>(<span class="string">&quot;&#123;&#125; and &#123;&#125;&quot;</span>, r1, r2); <span class="comment">//引用r1和r2被使用,失效</span></span><br><span class="line"><span class="comment">// 此位置之后 r1 和 r2 不再使用</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">dangle</span></span>() -&gt; &amp;<span class="built_in">String</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">    &amp;s   </span><br><span class="line">&#125;               <span class="comment">//! 作用域结束后s被清理,引用失效,出现悬垂引用,编译器报错</span></span><br></pre></td></tr></table></figure>

<h3 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h3><p><code>String</code>的切片类型是<code>&amp;str</code> ,<code>i32</code>数组的类型是<code>&amp;[i32]</code></p>
<figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">main</span></span>() &#123;</span><br><span class="line">    <span class="keyword">let</span> <span class="keyword">mut</span> s = <span class="built_in">String</span>::from(<span class="string">&quot;hello world&quot;</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">let</span> word = first_word(&amp;s[..]);  <span class="comment">//word获得一个不可变引用</span></span><br><span class="line"></span><br><span class="line">    s.clear(); <span class="comment">// 错误! 尝试获得可变引用, 失败, 因为已经有不可变引用</span></span><br><span class="line"></span><br><span class="line">    <span class="built_in">println!</span>(<span class="string">&quot;the first word is: &#123;&#125;&quot;</span>, word);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">fn</span> <span class="title">first_word</span></span>(s: &amp;<span class="built_in">str</span>) -&gt; &amp;<span class="built_in">str</span> &#123;</span><br><span class="line">    <span class="keyword">let</span> bytes = s.as_bytes();</span><br><span class="line">    <span class="keyword">for</span> (i, &amp;item) <span class="keyword">in</span> bytes.iter().enumerate() &#123;</span><br><span class="line">        <span class="keyword">if</span> item == <span class="string">b&#x27; &#x27;</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> &amp;s[<span class="number">0</span>..i];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &amp;s[..]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h2 id="结构体-Struct"><a href="#结构体-Struct" class="headerlink" title="结构体 ( Struct )"></a>结构体 ( Struct )</h2><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Rectangle</span></span> &#123;  <span class="comment">//定义结构体</span></span><br><span class="line">    width: <span class="built_in">u32</span>,</span><br><span class="line">    height: <span class="built_in">u32</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">impl</span> Rectangle &#123;   <span class="comment">//定义方法</span></span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">area</span></span>(&amp;<span class="keyword">self</span>) -&gt; <span class="built_in">u32</span> &#123;   <span class="comment">//需要&amp;self,实例方法</span></span><br><span class="line">        <span class="keyword">self</span>.width * <span class="keyword">self</span>.height</span><br><span class="line">    &#125;</span><br><span class="line">      <span class="function"><span class="keyword">fn</span> <span class="title">square</span></span>(size: <span class="built_in">u32</span>) -&gt; Rectangle &#123;  <span class="comment">//不需要&amp;self,关联函数</span></span><br><span class="line">        Rectangle &#123; width: size, height: size &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">Color</span></span>(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>);  <span class="comment">//元组结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">WriteMessage</span></span>(<span class="built_in">String</span>); <span class="comment">// 元组结构体</span></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">QuitMessage</span></span>;<span class="comment">//类单元结构体 (没有字段,实现trait)</span></span><br></pre></td></tr></table></figure>

<p>参数名和字段名相同时可以简写(类似JavaScript),还有<code>..user1</code>的写法也类似</p>
<h2 id="枚举与模式匹配"><a href="#枚举与模式匹配" class="headerlink" title="枚举与模式匹配"></a>枚举与模式匹配</h2><h3 id="定义枚举"><a href="#定义枚举" class="headerlink" title="定义枚举"></a>定义枚举</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">IpAddrKind</span></span> &#123;</span><br><span class="line">    V4,</span><br><span class="line">    V6,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Message</span></span> &#123;</span><br><span class="line">    Quit,</span><br><span class="line">    Move &#123; x: <span class="built_in">i32</span>, y: <span class="built_in">i32</span> &#125;,</span><br><span class="line">    Write(<span class="built_in">String</span>),</span><br><span class="line">    ChangeColor(<span class="built_in">i32</span>, <span class="built_in">i32</span>, <span class="built_in">i32</span>),</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">impl</span> Message &#123;</span><br><span class="line">    <span class="function"><span class="keyword">fn</span> <span class="title">call</span></span>(&amp;<span class="keyword">self</span>) &#123;</span><br><span class="line">        <span class="comment">// 在这里定义方法体</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="Option枚举"><a href="#Option枚举" class="headerlink" title="Option枚举"></a>Option枚举</h3><figure class="highlight rust"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> <span class="title">Option</span></span>&lt;T&gt; &#123;</span><br><span class="line">    <span class="literal">Some</span>(T),</span><br><span class="line">    <span class="literal">None</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Rust</tag>
        <tag>编程语言</tag>
      </tags>
  </entry>
  <entry>
    <title>Vue笔记</title>
    <url>//adf5c49.html</url>
    <content><![CDATA[<h2 id="Vue-概述"><a href="#Vue-概述" class="headerlink" title="Vue 概述"></a>Vue 概述</h2><h3 id="Vue-的特点"><a href="#Vue-的特点" class="headerlink" title="Vue 的特点"></a>Vue 的特点</h3><ol>
<li><p>响应式</p>
</li>
<li><p>组件化</p>
</li>
<li><p>数据驱动 视图与数据分离</p>
</li>
<li><p>渐进式</p>
</li>
<li><p>MVVM 架构  </p>
<a id="more"></a>

</li>
</ol>
<h3 id="MVVM-架构模式"><a href="#MVVM-架构模式" class="headerlink" title="MVVM 架构模式"></a>MVVM 架构模式</h3><ul>
<li><p>模型 Model</p>
</li>
<li><p>视图 View</p>
</li>
<li><p>视图模型 View model</p>
</li>
<li><p>绑定器 Binder</p>
</li>
</ul>
<p>在前端页面中，把 Model 用纯 JavaScript 对象表示，View 负责显示，两者做到了最大限度的分离。把 Model 和 View 关联起来的就是 ViewModel。ViewModel 负责把 Model 的数据同步到 View 显示出来，还负责把 View 的修改同步回 Model</p>
<h3 id="Vue-的生命周期"><a href="#Vue-的生命周期" class="headerlink" title="Vue 的生命周期"></a>Vue 的生命周期</h3><img src="/adf5c49/53bd4b27e1d0a1bd0b4efa4e30cb3a768c20ad8a704eb5f4327cc69464b80087.png" class="" title="生命周期">

<h2 id="基础语法"><a href="#基础语法" class="headerlink" title="基础语法"></a>基础语法</h2><h3 id="插值语法"><a href="#插值语法" class="headerlink" title="插值语法"></a>插值语法</h3><ul>
<li>Mustache 语法:  括号内可以是变量或者表达式</li>
<li>v-once: 代表这个元素/组件只会渲染一次, 不随数据变动而改变</li>
<li>v-html: 会把数据作为 HTML 代码解析到这个元素未知, <code>&lt;div v-html=&quot;var&quot;&gt;&lt;/div&gt;</code> 会把变量 var 里面的内容作为 HTML 内容解析</li>
<li>v-text: 和 Mustache 类似</li>
<li>v-pre: 不编译这个元素及其子元素, 显示原本的 Mustache 语法内容</li>
<li>v-clock: 这个属性在元素渲染完后就会消失</li>
</ul>
<h3 id="绑定属性"><a href="#绑定属性" class="headerlink" title="绑定属性"></a>绑定属性</h3><ul>
<li>v-bind: 绑定元素的属性值到 vue 实例里面的变量或者向另一个组件传递 props 值, 简写为 <code>:</code></li>
</ul>
<p>使用 v-bind 绑定 class(对象语法)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">&quot;&#123;&#x27;active&#x27;: 变量1, &#x27;line&#x27;: 变量2&#125;&quot;</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 v-bind 绑定 class(数组语法)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">class</span>=<span class="string">&quot;title&quot;</span> <span class="attr">:class</span>=<span class="string">“[‘active’,</span> &#x27;<span class="attr">line</span>&#x27; ]&quot;&gt;</span>Hello World<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 v-bind 绑定 style(对象语法)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">:style</span>=<span class="string">&quot;&#123;color: currentColor, fontSize: fontSize + &#x27;px&#x27;&#125;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>使用 v-bind 绑定 style(数组语法)</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h2</span> <span class="attr">:style</span>=<span class="string">&quot;[baseStyle, baseStyle1]&quot;</span>&gt;</span>&#123;&#123;message&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>Ø 对象的 key 是 CSS 属性名称<br>Ø 对象的 value 是具体赋的值，值可以来自于 data 中的属性</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">data: &#123;</span><br><span class="line">  message: <span class="string">&#x27;你好啊&#x27;</span>,</span><br><span class="line">  baseStyle: &#123;</span><br><span class="line">    backgroundColor: <span class="string">&#x27;red&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">  baseStyle1: &#123;</span><br><span class="line">    fontSize: <span class="string">&#x27;100px&#x27;</span></span><br><span class="line">  &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="计算属性"><a href="#计算属性" class="headerlink" title="计算属性"></a>计算属性</h3><ul>
<li>computed: 可以用来存放 data 里面多个数据组合结果</li>
</ul>
<blockquote>
<p>计算属性会进行缓存，如果多次使用时，计算属性只会调用一次</p>
</blockquote>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullname() &#123;</span><br><span class="line">    <span class="comment">//默认get方法</span></span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">computed: &#123;</span><br><span class="line">  fullname() &#123;</span><br><span class="line">    get() &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.firstName + <span class="string">&#x27; &#x27;</span> + <span class="built_in">this</span>.lastName;</span><br><span class="line">      &#125;,</span><br><span class="line">      set(newValue) &#123;</span><br><span class="line">        <span class="keyword">const</span> names = newValue.split(<span class="string">&#x27; &#x27;</span>)</span><br><span class="line">        <span class="built_in">this</span>.firstName = names[<span class="number">0</span>]</span><br><span class="line">        <span class="built_in">this</span>.lastName = names[<span class="number">1</span>]</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h3 id="事件监听"><a href="#事件监听" class="headerlink" title="事件监听"></a>事件监听</h3><ul>
<li>v-on: 绑定事件监听器, 缩写 <code>@</code></li>
</ul>
<p>绑定的方法不需要参数时, 可以省略 <code>()</code> , 如果方法本身中有一个参数，那么会默认将原生事件 event 参数传递进去, 需要参数和事件一起传入时用(var, $enent)调用, 定义时 function1(var, event)</p>
<p>使用修饰符: 例如 <code>@click.once</code> 表示只触发一次回调, <code>@keyup.enter</code> 代表 enter 抬起</p>
<h3 id="条件和循环"><a href="#条件和循环" class="headerlink" title="条件和循环"></a>条件和循环</h3><ul>
<li>v-if</li>
<li>v-else-if</li>
<li>v-else</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">&quot;app&gt;</span></span></span><br><span class="line"><span class="tag"><span class="string">&lt;div v-if=&quot;</span>&quot;&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else-if</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">vv-else-if</span>=<span class="string">&quot;&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">v-else</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>v-if 后面的条件为 false 时，对应的元素以及其子元素不会渲染。<br>也就是根本没有不会有对应的标签出现在 DOM 中。</p>
<blockquote>
<p>Tips: 如果我们在有输入内容的情况下，切换了类型，我们会发现文字依然显示之前的输入的内容。这是因为 Vue 在进行 DOM 渲染时，出于性能考虑，会尽可能的复用已经存在的元素，而不是重新创建新的元素。如果我们不希望 Vue 出现类似重复利用的问题，可以给对应的 input 添加属性 key 并且我们需要保证 key 的不同</p>
</blockquote>
<ul>
<li>v-show:</li>
</ul>
<p>v-if 当条件为 false 时，压根不会有对应的元素在 DOM 中。</p>
<p>v-show 当条件为 false 时，仅仅是将元素的 display 属性设置为 none 而已。</p>
<blockquote>
<p>当需要在显示与隐藏之间切片很频繁时，使用 v-show, 当只有一次切换时，通过使用 v-if</p>
</blockquote>
<ul>
<li>v-for</li>
</ul>
<p>遍历数组, <code>v-for=&quot;(item, index) in items&quot;</code> , 也可以只遍历项不遍历索引</p>
<p>遍历数组, <code>v-for=&quot;(value, key, index) in obj&quot;</code></p>
<p>注意使用下标改变数组不会有响应式, 可以使用<br>push()<br>pop()<br>shift()<br>unshift()<br>splice()<br>sort()<br>reverse()</p>
<blockquote>
<p>官方推荐我们在使用 v-for 时，给对应的元素或组件添加上一个:key 属性来给每个节点做一个唯一标识, 有利于高效的更新虚拟 DOM</p>
</blockquote>
<h3 id="表单绑定"><a href="#表单绑定" class="headerlink" title="表单绑定"></a>表单绑定</h3><ul>
<li>v-model: 实现表单元素和数据的双向绑定</li>
</ul>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;message&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;male&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;male&quot;</span> <span class="attr">value</span>=<span class="string">&quot;男&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>男</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;female&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;radio&quot;</span> <span class="attr">id</span>=<span class="string">&quot;female&quot;</span> <span class="attr">value</span>=<span class="string">&quot;女&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;sex&quot;</span>&gt;</span>女</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- 1.checkbox单选框 --&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">for</span>=<span class="string">&quot;agree&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">id</span>=<span class="string">&quot;agree&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;isAgree&quot;</span>&gt;</span>同意协议</span><br><span class="line"><span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的是: &#123;&#123;isAgree&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">:disabled</span>=<span class="string">&quot;!isAgree&quot;</span>&gt;</span>下一步<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.checkbox多选框--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;篮球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>篮球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;足球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>足球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;乒乓球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>乒乓球</span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;checkbox&quot;</span> <span class="attr">value</span>=<span class="string">&quot;羽毛球&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;hobbies&quot;</span>&gt;</span>羽毛球</span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您的爱好是: &#123;&#123;hobbies&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!--1.选择一个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruit&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruit&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">&lt;!--2.选择多个--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">&quot;abc&quot;</span> <span class="attr">v-model</span>=<span class="string">&quot;fruits&quot;</span> <span class="attr">multiple</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;苹果&quot;</span>&gt;</span>苹果<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;香蕉&quot;</span>&gt;</span>香蕉<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;榴莲&quot;</span>&gt;</span>榴莲<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">&quot;葡萄&quot;</span>&gt;</span>葡萄<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h2</span>&gt;</span>您选择的水果是: &#123;&#123;fruits&#125;&#125;<span class="tag">&lt;/<span class="name">h2</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>修饰符</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">v - model.lazy; <span class="comment">//数据在失去焦点或者回车时才会更新</span></span><br><span class="line">v - model.number; <span class="comment">//让在输入框中输入的内容自动转成数字类型</span></span><br><span class="line">v - model.trim; <span class="comment">//trim修饰符可以过滤内容左右两边的空格</span></span><br></pre></td></tr></table></figure>

<blockquote>
<p>v-model 其实是一个语法糖，它的背后本质上是包含两个操作：1.v-bind 绑定一个 value 属性 2.v-on 指令给当前元素绑定 input 事件</p>
</blockquote>
<h2 id="组件化开发"><a href="#组件化开发" class="headerlink" title="组件化开发"></a>组件化开发</h2><h3 id="注册组件"><a href="#注册组件" class="headerlink" title="注册组件"></a>注册组件</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">//创建组件构造器</span></span><br><span class="line">&lt;template id=<span class="string">&quot;myCpn&quot;</span>&gt;</span><br><span class="line">&lt;div&gt;组件&lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">components:&#123;</span><br><span class="line">  <span class="string">&#x27;myCpn&#x27;</span>:&#123;</span><br><span class="line">    template:<span class="string">&#x27;#myCpn&#x27;</span>,</span><br><span class="line">    data():&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        message:<span class="string">&#x27;Hello World&#x27;</span></span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line">//使用组件</span><br><span class="line"><span class="tag">&lt;<span class="name">myCpn</span>&gt;</span><span class="tag">&lt;/<span class="name">myCpn</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="父子组件之间通信"><a href="#父子组件之间通信" class="headerlink" title="父子组件之间通信"></a>父子组件之间通信</h3><ol>
<li>通过 props 向子组件传递消息</li>
<li>通过事件向父组件发送消息</li>
</ol>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">myCpn</span> <span class="attr">:message</span>=<span class="string">&quot;Hello&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">myCpn</span>&gt;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">components:&#123;</span><br><span class="line">  <span class="string">&#x27;myCpn&#x27;</span>:&#123;</span><br><span class="line">    template:<span class="string">&#x27;#myCpn&#x27;</span>,</span><br><span class="line">    props:[<span class="string">&#x27;message&#x27;</span>], <span class="comment">//值可以是对象或者数组</span></span><br><span class="line">    props:&#123;</span><br><span class="line">      msg1:<span class="built_in">String</span>,</span><br><span class="line">      msg2:<span class="built_in">Number</span>,</span><br><span class="line">      msg3:&#123;</span><br><span class="line">        type:object,</span><br><span class="line">        <span class="keyword">default</span>:<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">          <span class="keyword">return</span> &#123;<span class="attr">msg</span>:<span class="string">&#x27;Hello&#x27;</span>&#125;</span><br><span class="line">        &#125; <span class="comment">//对象或者数组的默认值必须从一个工厂函数获取</span></span><br><span class="line">        required:<span class="literal">true</span>, <span class="comment">//是否必须</span></span><br><span class="line">    &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<img src="/adf5c49/299.png" class="" title="父子通信">

<h3 id="父子组件之间的访问"><a href="#父子组件之间的访问" class="headerlink" title="父子组件之间的访问"></a>父子组件之间的访问</h3><ul>
<li><p>父访问子: $child 或者$refs</p>
</li>
<li><p>子访问父: $parent</p>
<p>通过$children 访问子组件时，是一个数组类型，访问其中的子组件必须通过索引值,<br>通过 ref 给某一个子组件绑定一个特定的 ID。其次，通过 this.$refs.ID 就可以访问到该组件了。</p>
<blockquote>
<p>非父子组件使用 Vuex 通信</p>
</blockquote>
</li>
</ul>
<h3 id="插槽-slot"><a href="#插槽-slot" class="headerlink" title="插槽 slot"></a>插槽 slot</h3><ul>
<li>具名插槽 定义: <code>&lt;slot name=&#39;myslot&#39;&gt;&lt;/slot&gt;</code> 使用: <code>&lt;span slot=&quot;myslot&quot;&gt;&lt;/span&gt;</code></li>
<li>作用域插槽:父组件替换插槽的标签，但是内容由子组件来提供。<br><code>&lt;slot data=&quot;array&quot;&gt;&lt;/slot&gt;</code><br><code>&lt;template slot-scope=&quot;slotProps&quot;&gt; //slotProps.data是数据</code></li>
</ul>
<h2 id="前端模块化开发"><a href="#前端模块化开发" class="headerlink" title="前端模块化开发"></a>前端模块化开发</h2><ul>
<li>export <code>export default function()&#123;&#125;</code></li>
<li>import <code>import xxx from &#39;./xxx.js&#39;</code></li>
</ul>
<h2 id="webpack"><a href="#webpack" class="headerlink" title="webpack"></a>webpack</h2><h2 id="Vue-CLI"><a href="#Vue-CLI" class="headerlink" title="Vue CLI"></a>Vue CLI</h2><h2 id="Vue-router"><a href="#Vue-router" class="headerlink" title="Vue-router"></a>Vue-router</h2><h3 id="HTML5-的改变-URL-方式"><a href="#HTML5-的改变-URL-方式" class="headerlink" title="HTML5 的改变 URL 方式"></a>HTML5 的改变 URL 方式</h3><p>锚点方式</p>
<ul>
<li>location.hash=’/‘</li>
</ul>
<p>HTML5 的 history 方式</p>
<ol>
<li>history.pushState({},’’,’/‘)</li>
<li>history.replaceState({},’’,’/‘)</li>
<li>history.back()</li>
<li>history.forward()</li>
<li>history.go(-1)</li>
</ol>
<h3 id="路由"><a href="#路由" class="headerlink" title="路由"></a>路由</h3><p><code>&lt;router-link to=&quot;/xx&quot;&gt;</code><br><code>&lt;router-view&gt;</code><br>tag: tag 可以指定<code>&lt;router-link&gt;</code>之后渲染成什么组件, 比如上面的代码会被渲染成一个<code>&lt;li&gt;</code>元素, 而不是<code>&lt;a&gt;</code><br>replace: replace 不会留下 history 记录, 所以指定 replace 的情况下, 后退键返回不能返回到上一个页面中<br>active-class: 当<code>&lt;router-link&gt;</code>对应的路由匹配成功时, 会自动给当前元素设置一个 router-link-active 的 class, 设置 active-class 可以修改默认的名称.</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path:<span class="string">&#x27;/&#x27;</span>,</span><br><span class="line">  redirect:<span class="string">&#x27;/home&#x27;</span></span><br><span class="line">&#125;,</span><br><span class="line">&#123;</span><br><span class="line">  path:<span class="string">&#x27;/home&#x27;</span>,</span><br><span class="line">  component:<span class="string">&#x27;Home&#x27;</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">### 动态路由</span><br><span class="line"></span><br><span class="line">​<span class="string">``</span><span class="string">`JS</span></span><br><span class="line"><span class="string">&#123;</span></span><br><span class="line"><span class="string">  path:&#x27;/user/:id&#x27;,</span></span><br><span class="line"><span class="string">  component:User</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span>&#123;&#123;$router.params.id&#125;&#125;<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">&quot;/user/123&quot;</span>&gt;</span>用户<span class="tag">&lt;<span class="name">router-link</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h3 id="路由懒加载"><a href="#路由懒加载" class="headerlink" title="路由懒加载"></a>路由懒加载</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">component:<span class="function">()=&gt;</span> <span class="keyword">import</span> (<span class="string">&#x27;./xxx/xx&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="嵌套路由"><a href="#嵌套路由" class="headerlink" title="嵌套路由"></a>嵌套路由</h3><figure class="highlight js"><table><tr><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  path:<span class="string">&#x27;/parent,</span></span><br><span class="line"><span class="string">  component:Parent,</span></span><br><span class="line"><span class="string">  children:[</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">    path:&#x27;</span>c1<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    component:&#x27;</span>xx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">    &#123;</span></span><br><span class="line"><span class="string">    path:&#x27;</span>c2<span class="string">&#x27;,</span></span><br><span class="line"><span class="string">    component:&#x27;</span>xx<span class="string">&#x27;</span></span><br><span class="line"><span class="string">    &#125;,</span></span><br><span class="line"><span class="string">  ]</span></span><br><span class="line"><span class="string">&#125;</span></span><br></pre></td></tr></table></figure>

<h3 id="传递参数"><a href="#传递参数" class="headerlink" title="传递参数"></a>传递参数</h3><p>传递参数主要有两种类型: params 和 query</p>
<ol>
<li>params 的类型:<br>配置路由格式: /router/:id<br>传递的方式: 在 path 后面跟上对应的值<br>传递后形成的路径: /router/123, /router/abc<br>query 的类型:</li>
<li>配置路由格式: /router, 也就是普通配置<br>传递的方式: 对象中使用 query 的 key 作为传递方式<br>传递后形成的路径: /router?id=123, /router?id=abc</li>
</ol>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">&lt;router-link</span><br><span class="line">  :to&#x3D;&quot;&#123;</span><br><span class="line">    path:&#39;&#x2F;xx&#x2F;&#39; + 123,</span><br><span class="line">    query:&#123;name:&#39;xxx&#39;,age:19&#125;</span><br><span class="line">  &#125;&quot;</span><br><span class="line">&gt;&lt;&#x2F;router-link&gt;</span><br></pre></td></tr></table></figure>

<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">methods: &#123;</span><br><span class="line">  toLocation()&#123;</span><br><span class="line">    <span class="built_in">this</span>.$router.push(&#123;</span><br><span class="line">      path:<span class="string">&#x27;/xx/&#x27;</span> + <span class="number">123</span>,</span><br><span class="line">      query:&#123;<span class="attr">name</span>:<span class="string">&#x27;xxx&#x27;</span>,<span class="attr">age</span>:<span class="number">19</span>&#125;</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>获取参数 <code>$route.params</code> <code>$route.query</code></p>
<h3 id="导航守卫"><a href="#导航守卫" class="headerlink" title="导航守卫"></a>导航守卫</h3><p>vue-router 提供的导航守卫主要用来监听监听路由的进入和离开的.<br>vue-router 提供了 beforeEach 和 afterEach 的钩子函数, 它们会在路由即将改变前和改变后触发.</p>
<h2 id="Vuex"><a href="#Vuex" class="headerlink" title="Vuex"></a>Vuex</h2><p>全局单例模式状态管理</p>
<img src="/adf5c49/c52b171677bcc8ef04e33bfec2e8b20fa685a7d76000db1338cb23c46cab8d3c.png" class="" title="c52b171677bcc8ef04e33bfec2e8b20fa685a7d76000db1338cb23c46cab8d3c">

<ul>
<li><p>state 单一状态树</p>
</li>
<li><p>Getters 获取 state 变异后的状态</p>
</li>
<li><p>Mutation State 的状态更新 同步操作</p>
</li>
<li><p>Action 异步操作</p>
</li>
<li><p>Module 把 store 分割成不同模块</p>
<p>通过 this.$store.state.属性 的方式来访问状态<br>通过 this.$store.commit(‘mutation 中方法’) 来修改状态</p>
<p>当给 state 中的对象添加新属性时, 使用下面的方式<br>方式一: 使用 Vue.set(obj, ‘newProp’, 123)<br>方式二: 用新对象给旧对象重新赋值</p>
</li>
</ul>
<h2 id="Promise-amp-Axios"><a href="#Promise-amp-Axios" class="headerlink" title="Promise &amp; Axios"></a>Promise &amp; Axios</h2><h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>链式调用,简化了网络操作</p>
<p>如果我们希望数据直接包装成 Promise.resolve，那么在 then 中可以直接返回数据</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="keyword">new</span> Promis(<span class="function">(<span class="params">resove,reject</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">setTimeout</span>(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    resove(<span class="string">&#x27;Hello World&#x27;</span>)</span><br><span class="line">  &#125;,<span class="number">1000</span>)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.resolve(data)</span><br><span class="line">&#125;).then(<span class="function"><span class="params">data</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">Promise</span>.reject(data)</span><br><span class="line">&#125;).catch(<span class="function"><span class="params">data</span>=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(data);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<h3 id="Axios"><a href="#Axios" class="headerlink" title="Axios"></a>Axios</h3><p>发送 get 请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.get(url,params)</span><br><span class="line">.then(<span class="function"><span class="params">res</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res)</span><br><span class="line">&#125;)</span><br><span class="line">.catch(<span class="function"><span class="params">err</span> =&gt;</span> &#123;</span><br><span class="line">  <span class="built_in">console</span>.error(err);</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure>

<p>并发请求</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.all([</span><br><span class="line">  axios.get(url),</span><br><span class="line">  axios.get(url, &#123;</span><br><span class="line">    params: &#123;</span><br><span class="line">      key1: value1</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;)</span><br><span class="line">])</span><br><span class="line">.then(axios.spread(<span class="function">(<span class="params">res1, res2</span>)=&gt;</span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(res1);</span><br><span class="line">  <span class="built_in">console</span>.log(res2);</span><br><span class="line">&#125;))</span><br></pre></td></tr></table></figure>

<p>拦截器</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line">axios.interceptors.request.use(<span class="function"><span class="params">config</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// Do something before request is sent</span></span><br><span class="line"><span class="keyword">return</span> config;</span><br><span class="line">&#125;,<span class="function"><span class="params">error</span> =&gt;</span> &#123;</span><br><span class="line"><span class="comment">// Do something with request error</span></span><br><span class="line"><span class="keyword">return</span> <span class="built_in">Promise</span>.reject(error);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<h2 id="Vue3"><a href="#Vue3" class="headerlink" title="Vue3"></a>Vue3</h2><h3 id="Composition-API"><a href="#Composition-API" class="headerlink" title="Composition API"></a>Composition API</h3><h3 id="Option-API"><a href="#Option-API" class="headerlink" title="Option API"></a>Option API</h3>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>Vue</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>//4a17b156.html</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<p>​      <a id="more"></a></p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>Matplotlib使用</title>
    <url>//406fba42.html</url>
    <content><![CDATA[<h2 id="基本用法"><a href="#基本用法" class="headerlink" title="基本用法"></a>基本用法</h2><p>导入模块matplotlib.pyplot和numpy</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br></pre></td></tr></table></figure>

<a id="more"></a>  

<p>定义窗口并画图</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">x = np.linspace(<span class="number">-3</span>, <span class="number">3</span>, <span class="number">50</span>)  </span><br><span class="line">y = x**<span class="number">2</span></span><br><span class="line">plt.figure(num=<span class="number">3</span>, figsize=(<span class="number">8</span>, <span class="number">5</span>))   <span class="comment"># 生成一个画板 编号为3,尺寸是(8,5)</span></span><br><span class="line">plt.plot(x, y, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>, linestyle=<span class="string">&#x27;--&#x27;</span>) <span class="comment"># 画关于xy的图像,颜色为red 线宽为1.0,样式是&#x27;--&#x27;</span></span><br><span class="line">plt.xlim((<span class="number">-1</span>, <span class="number">2</span>))  </span><br><span class="line">plt.ylim((<span class="number">-2</span>, <span class="number">3</span>))  <span class="comment"># 设定y的坐标轴范围</span></span><br><span class="line">plt.xlabel(<span class="string">&#x27;I am x&#x27;</span>)  </span><br><span class="line">plt.ylabel(<span class="string">&#x27;I am y&#x27;</span>)  <span class="comment"># 设定y坐标轴名称</span></span><br><span class="line">new_ticks = np.linspace(<span class="number">-1</span>, <span class="number">2</span>, <span class="number">5</span>)  </span><br><span class="line">plt.xticks(new_ticks)  <span class="comment"># 重新设定x轴的刻度</span></span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],[<span class="string">r&#x27;$really\ bad$&#x27;</span>, <span class="string">r&#x27;$bad$&#x27;</span>, <span class="string">r&#x27;$normal$&#x27;</span>, <span class="string">r&#x27;$good$&#x27;</span>, <span class="string">r&#x27;$really\ good$&#x27;</span>])  <span class="comment"># 设点y轴的刻度并标定名称</span></span><br><span class="line">plt.show()  <span class="comment"># 显示图像</span></span><br></pre></td></tr></table></figure>



<p>设置边框</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">ax = plt.gca() 获得坐标轴对象</span><br><span class="line">ax.spines[‘right’].set_color(‘none’)</span><br><span class="line">ax.spines[‘top’].set_color(‘none’)   <span class="comment">#  将右边和上面的边框隐藏</span></span><br><span class="line">ax.xaxis.set_ticks_position(‘bottom’) </span><br><span class="line">ax.yaxis.set_ticks_position(‘left’)  <span class="comment">#设定x轴的刻度显示在下面,y轴的刻度显示在左边</span></span><br><span class="line">ax.spines[‘bottom’].set_position((‘data’, <span class="number">0</span>)) <span class="comment"># data表示通过值来设置x轴的位置，将x轴绑定在y=0的位置</span></span><br><span class="line">ax.spines[‘left’].set_position((‘data’, <span class="number">0</span>))<span class="comment"># 设定x,y轴在(0,0)轴相交</span></span><br><span class="line"><span class="comment"># 或者 ax.spines[&#x27;left&#x27;].set_position((&#x27;axes&#x27;,0.5)) axes表示以百分比的形式设置轴的位置，即将y轴绑定在x轴50%的位置，也就是x轴的中点</span></span><br></pre></td></tr></table></figure>

<h2 id="绘制子图"><a href="#绘制子图" class="headerlink" title="绘制子图"></a>绘制子图</h2><p>在matplotlib中，<code>整个图像</code>为一个<code>Figure</code>对象。在Figure对象中可以包含一个或者多个<code>Axes</code>对象。每个Axes(ax)对象都是一个拥有自己坐标系统的<strong>绘图区域</strong>。所属关系如下：</p>
<img src="/406fba42/5Vfd6AY.png" class="" title="img">

<p>一个”Figure”意味着用户交互的整个窗口。在这个figure中容纳着”subplots”。</p>
<p>当我们调用plot时，matplotlib会调用<code>gca()</code>获取当前的axes绘图区域，而且<code>gca</code>反过来调用<code>gcf()</code>来获得当前的figure。如果figure为空，它会自动调用<code>figure()</code>生成一个figure, 严格的讲，是生成<code>subplots(111)</code>。</p>
<img src="/406fba42/Xt03c7u.png" class="" title="img">

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">1</span>) <span class="comment"># 会将原始的图像切割成2个子图像，是2行1列，并将现在的操作位置转到第一个子图上，这样便实现了绘制子图的方法。 。(第一个参数代表子图的行数；第二个参数代表该行图像的列数； 第三个参数代表每行的第几个图像。)</span></span><br><span class="line">plt.plot(...)</span><br><span class="line"></span><br><span class="line">plt.subplot(<span class="number">2</span>,<span class="number">1</span>,<span class="number">2</span>) <span class="comment"># 将现在的操作位置转到第二个子图上，开始绘制第二个子图。</span></span><br><span class="line">plt.plot(...)</span><br></pre></td></tr></table></figure>

<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">fig, ax = plt.subplots(<span class="number">2</span>,<span class="number">2</span>)  <span class="comment"># 其中参数分别代表子图的行数和列数，一共有 2x2 个图像。函数返回一个figure图像和一个子图ax的array列表。</span></span><br></pre></td></tr></table></figure>

<h2 id="图例和标注"><a href="#图例和标注" class="headerlink" title="图例和标注"></a>图例和标注</h2><ul>
<li>1.添加图例：plt.legend()</li>
<li>2.画点：plt.scatter()</li>
<li>3.添加标注：plt.annotate()</li>
<li>4.添加注释：plt.text()</li>
</ul>
<p>设定坐标轴特定刻度值名称</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">new_ticks = np.linspace(<span class="number">-1</span>, <span class="number">2</span>, <span class="number">5</span>)  </span><br><span class="line">plt.xticks(new_ticks)  <span class="comment"># 重新设定x轴的刻度</span></span><br><span class="line">plt.yticks([<span class="number">-2</span>, <span class="number">-1.8</span>, <span class="number">-1</span>, <span class="number">1.22</span>, <span class="number">3</span>],[<span class="string">r&#x27;$really\ bad$&#x27;</span>, <span class="string">r&#x27;$bad$&#x27;</span>, <span class="string">r&#x27;$normal$&#x27;</span>, <span class="string">r&#x27;$good$&#x27;</span>, <span class="string">r&#x27;$really\ good$&#x27;</span>])  <span class="comment"># 设点y轴的刻度并标定名称</span></span><br></pre></td></tr></table></figure>

<p>添加图例</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">l1 = plt.plot(x, y1, label=<span class="string">&#x27;linear line&#x27;</span>)</span><br><span class="line">l2 = plt.plot(x, y2, color=<span class="string">&#x27;red&#x27;</span>, linewidth=<span class="number">1.0</span>,linestyle=<span class="string">&#x27;--&#x27;</span>, label=<span class="string">&#x27;square line&#x27;</span>)</span><br><span class="line">plt.legend(loc=<span class="string">&#x27;&#x27;</span>) <span class="comment">#best 自动分配 还可以指定&#x27;upper right&#x27; &#x27;lower left&#x27;&#x27;center right&#x27;等组合 </span></span><br></pre></td></tr></table></figure>

<p>Annotation 标注</p>
<p>待续….</p>
<h2 id="各类图形"><a href="#各类图形" class="headerlink" title="各类图形"></a>各类图形</h2><ul>
<li><p>1.散点图：plt.scatter()</p>
</li>
<li><p>2.柱状图：plt.bar()</p>
</li>
<li><p>3.等高线图：plt.contourf()</p>
</li>
<li><p>4.在等高线图中增加label：plt.clabel()</p>
</li>
<li><p>5.矩阵画图：plt.imshow()</p>
</li>
<li><p>6.在随机矩阵图中增加colorbar：plt.colorbar()</p>
</li>
</ul>
<figure class="highlight plain"><table><tr><td class="code"><pre><span class="line">n &#x3D; 1024  # data size</span><br><span class="line">X &#x3D; np.random.normal(0, 1, n)  # 每一个点的X值  (随机生成)</span><br><span class="line">Y &#x3D; np.random.normal(0, 1, n)  # 每一个点的Y值</span><br><span class="line">T &#x3D; np.arctan2(Y, X)  # for color value</span><br><span class="line"></span><br><span class="line">plt.scatter(X, Y, s&#x3D;75, c&#x3D;T, alpha&#x3D;.5) # s表示size c表示color alpha表示透明值</span><br><span class="line"></span><br><span class="line">plt.xlim(-1.5, 1.5)</span><br><span class="line">plt.xticks(())  # ignore xticks 传入空值来隐藏x轴坐标刻度</span><br><span class="line">plt.ylim(-1.5, 1.5)</span><br><span class="line">plt.yticks(())  # ignore yticks</span><br><span class="line"></span><br><span class="line">plt.show()</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>matplotlib</tag>
      </tags>
  </entry>
  <entry>
    <title>C++学习笔记</title>
    <url>//ad4f1e09.html</url>
    <content><![CDATA[<h1 id="Coming"><a href="#Coming" class="headerlink" title="Coming"></a>Coming</h1>]]></content>
      <categories>
        <category>笔记</category>
      </categories>
      <tags>
        <tag>编程语言</tag>
        <tag>C++</tag>
      </tags>
  </entry>
</search>
